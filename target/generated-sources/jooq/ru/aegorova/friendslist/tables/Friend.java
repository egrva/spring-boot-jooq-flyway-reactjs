/**
 * This class is generated by jOOQ
 */
package ru.aegorova.friendslist.tables;


import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.TableImpl;

import ru.aegorova.friendslist.Keys;
import ru.aegorova.friendslist.Public;
import ru.aegorova.friendslist.tables.records.FriendRecord;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.8.5"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Friend extends TableImpl<FriendRecord> {

    private static final long serialVersionUID = 1164193109;

    /**
     * The reference instance of <code>public.friend</code>
     */
    public static final Friend FRIEND = new Friend();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<FriendRecord> getRecordType() {
        return FriendRecord.class;
    }

    /**
     * The column <code>public.friend.id</code>.
     */
    public final TableField<FriendRecord, Integer> ID = createField("id", org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.field("nextval('friend_id_seq'::regclass)", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>public.friend.name</code>.
     */
    public final TableField<FriendRecord, String> NAME = createField("name", org.jooq.impl.SQLDataType.CLOB.nullable(false), this, "");

    /**
     * Create a <code>public.friend</code> table reference
     */
    public Friend() {
        this("friend", null);
    }

    /**
     * Create an aliased <code>public.friend</code> table reference
     */
    public Friend(String alias) {
        this(alias, FRIEND);
    }

    private Friend(String alias, Table<FriendRecord> aliased) {
        this(alias, aliased, null);
    }

    private Friend(String alias, Table<FriendRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<FriendRecord, Integer> getIdentity() {
        return Keys.IDENTITY_FRIEND;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<FriendRecord> getPrimaryKey() {
        return Keys.FRIEND_PKEY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<FriendRecord>> getKeys() {
        return Arrays.<UniqueKey<FriendRecord>>asList(Keys.FRIEND_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Friend as(String alias) {
        return new Friend(alias, this);
    }

    /**
     * Rename this table
     */
    public Friend rename(String name) {
        return new Friend(name, null);
    }
}
