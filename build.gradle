buildscript {
    repositories {
        mavenCentral()
        jcenter()
        maven { url "https://plugins.gradle.org/m2/" }
    }
    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        classpath "org.jetbrains.kotlin:kotlin-allopen:$kotlin_version"
        classpath "org.springframework.boot:spring-boot-gradle-plugin:$spring_boot_version"
        classpath "io.spring.gradle:dependency-management-plugin:$dependency_management_plugin"
        classpath "org.postgresql:postgresql:$postgresql_plugin"
        classpath "nu.studer:gradle-jooq-plugin:$jooq_plugin"
        classpath "gradle.plugin.com.boxfuse.client:flyway-release:$flyway_plugin"
    }
}

plugins {
    id 'org.springframework.boot' version "$spring_boot_version"
    id 'io.spring.dependency-management' version "$dependency_management_plugin"
    id 'java'
    id 'com.github.node-gradle.node' version "$node_gradle_version"
    id 'com.bmuschko.docker-spring-boot-application' version "$docker_spring_boot_aplication_version"
}

apply plugin: 'base'
apply plugin: 'java'
apply plugin: 'kotlin'
apply plugin: "kotlin-spring"
apply plugin: 'org.springframework.boot'
apply plugin: 'nu.studer.jooq'
apply plugin: 'org.flywaydb.flyway'
apply plugin: 'io.spring.dependency-management'

group = 'ru.aegorova'
version = '1.0-RELEASE'
sourceCompatibility = '1.8'

sourceSets {
    integrationTest {
        java.srcDir "$projectDir/src/integrationTest/java"
        kotlin.srcDir "$projectDir/src/integrationTest/kotlin"
        resources.srcDir "$projectDir/src/integrationTest/resources"
        compileClasspath += sourceSets.main.output
        runtimeClasspath += sourceSets.main.output
    }
}

configurations {
    integrationTestCompile.extendsFrom testCompile
    integrationTestRuntime.extendsFrom testRuntime
}

docker {
    springBootApplication {
        baseImage = 'openjdk:8-jre-alpine'
        maintainer = 'Anastasiia Egorova'
        ports = [8080]
        images = ["aegorova/friendslist:$version", 'aegorova/friendslist:latest']
        jvmArgs = ['-Xmx128m', '-XX:+UseG1GC', '-Djava.awt.headless=true']
    }
}

repositories {
    jcenter()
    mavenCentral()
}
dependencies {
    // kotlin
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"
    // spring boot starter jdbc
    compile("org.springframework.boot:spring-boot-starter-jdbc")
    // spring boot starter web
    compile("org.springframework.boot:spring-boot-starter-web")
    // JOOQ
    compile("org.springframework.boot:spring-boot-starter-jooq:$spring_boot_version")
    // postgresql for jooq
    jooqRuntime ("org.postgresql:postgresql:$psql_JDBCDriver_version")
    // postgresql JDBC driver
    compile("org.postgresql:postgresql:$psql_JDBCDriver_version")
    // Flyway DB migrations
    compile("org.flywaydb:flyway-core:$flyway_core_version")
    // jUnit
    testCompile("junit:junit:$juint_version")
    // Spring boot starter test
    testCompile("org.springframework.boot:spring-boot-starter-test") { exclude group: 'org.junit.jupiter' }
    // Testcontainers PostgreSQL
    testCompile("org.testcontainers:postgresql:$testcontainers_version")
    // selenium test container
    testCompile("org.testcontainers:selenium:$testcontainers_version")
    // selenium remote driver
    testCompile("org.seleniumhq.selenium:selenium-remote-driver:$selenium_version")
    // selenium chrome driver
    testCompile("org.seleniumhq.selenium:selenium-chrome-driver:$selenium_version")
}

jooq {
    csmart(sourceSets.main) {
        jdbc {
            driver = jdbc_driver
            url = jdbc_url
            user = jdbc_user
            password = jdbc_password
        }
        generator {
            name = jooq_generator_name
            strategy {
                name = jooq_generator_strategy_name
            }
            database {
                name = jooq_generator_database_name
                inputSchema = jooq_generator_database_inputSchema
            }
            generate {
                relations = jooq_generator_generate_relations
                deprecated = jooq_generator_generate_deprecated
                records = jooq_generator_generate_records
                immutablePojos = jooq_generator_generate_immutablePojos
                fluentSetters = jooq_generator_generate_fluentSetters
            }
            target {
                packageName = jooq_generator_target_packageName
                directory = jooq_generator_target_directory
            }
        }
    }
}

node {
    version = node_version
    npmVersion = node_npmVersion
    download = node_download
}

task npm_run_build {
    inputs.files fileTree('public')
    inputs.files fileTree('src')
    inputs.file 'package.json'
    inputs.file 'package-lock.json'
    outputs.dir 'build'
}

task buildReactApp(type: NodeTask, dependsOn: 'npmInstall') {
    script = project.file('node_modules/.bin/webpack')
    args = [
            '--mode', 'development',
            '--entry', './src/main/webapp/javascript/index.jsx',
            '-o', './src/main/resources/static/dist/react-app.js'
    ]
}

processResources.dependsOn 'buildReactApp'
clean.delete << file('node_modules')
clean.delete << file('src/main/resources/static/dist')

compileKotlin {
    kotlinOptions {
        jvmTarget = "1.8"
    }
}

compileTestKotlin {
    kotlinOptions {
        jvmTarget = "1.8"
    }
}

task integrationTest(type: Test) {
    description = 'Runs friend rest tests.'
    group = 'verification'
    testClassesDirs = sourceSets.integrationTest.output.classesDirs
    classpath = sourceSets.integrationTest.runtimeClasspath
    shouldRunAfter test
}

generateCsmartJooqSchemaSource.enabled(false)